//Function bitpat_search looks for the occurence of a specified pattern of bits inside an unsigned int. It takes three args. source, pattern, and n. It searches the integer source, starting at the leftmost bit, to see of the rightmost n bits of pattern occur in source. If the pattern is found, bitpat_search returns the number of the bit (0 being leftmost) at which the pattern begins. If not found, return -1. 

#include <stdio.h>

int int_size()
{

	int x = ~0;
	int count = 1;
	while( x <<= 1)
		count++;
	return count;
}


int bitpat_search(unsigned int source, unsigned int pattern, int n)
{
	int size = int_size();
	int index = 1;
	unsigned int buffer = 0;
	unsigned int ones_compliment_mask;
	
	
	//n leftmost ones are created by taking the two's compliment of an n bit mask
	ones_compliment_mask = ~0 << (size - n); 
	//printf("%u = ones compliment mask", ones_compliment_mask);
	//Obtain righmost n bits of pattern by left shifting int size - n
	pattern <<= (size - n); 
	//Left shift source until buffer & ones compliment mask has a value, i.e. the bit fields are lined up
	while(buffer == 0)
	{
		buffer = source & ones_compliment_mask;
		printf("Buffer in while loop = %u", buffer);
		source <<= 1;
	}
	//Iterate source by right shifting, check if pattern is in source with rightmost size - n bits masked
	while(source)
	{
		//Create a buffer containing only the left n bits by anding it with ones_compliment_mask.
		buffer = source & ones_compliment_mask;
	//	printf("index = %i	 buffer = %u		pattern = %u	source = %u	mask = %u\n", index, buffer, pattern, source, ones_compliment_mask);
		if(buffer == pattern)
			return index;
		index++;
		source <<= 1;
	}
	return -1;
}

int main(void)
{

	int int_size();
	int bitpat_search(unsigned int source, unsigned int pattern, int n);
	int s = 0xe1f4;
	int p = 0x5;
	int n = 3;
	printf("%u = initial source, %u = initial pattern, %i = n\n", s, p, n);
	printf("Bitpat_search result = %i \n", bitpat_search(s, p, n));
	//printf("%i \n", bitpat_search(0xfffffff, 0xff, 3));
	
};
